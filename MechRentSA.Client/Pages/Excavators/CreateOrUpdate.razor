@page "/excavadora"
@page "/excavadora/{id:int}"

@using MechRentSA.Shared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using MechRentSA.Client.Interfaces;

@inject HttpClient Http
@inject IJSRuntime JS
@inject SweetAlertService Swal;
@inject IExcavatorService excavatorService;
@inject NavigationManager navegation;

<PageTitle>@title</PageTitle>

<h1>@title</h1>

<EditForm Model="excavatorDTO" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="row">
        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
            <div class="form-group">
                <label for="exampleFormControlTextarea1">
                    Maquina <span class="text-danger">*</span>
                </label>
                <InputText class="form-control machinery" id="machinery"
                       @bind-Value="excavatorDTO.Type"
                       placeholder="Nombre de la maquina Ej. Caterpillar 320d2">
                 </InputText>
                 <ValidationMessage For="@(() => excavatorDTO.Type)"></ValidationMessage>
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
            <div class="form-group">
                <label for="exampleFormControlTextarea1">
                    Costo/h COP <span class="text-danger">*</span>
                </label>
                <InputNumber class="form-control coste" id="coste" min="0.00"
                           @bind-Value="excavatorDTO.HourlyRate"
                           placeholder="Ej. $ 0.00">
                </InputNumber>
                <ValidationMessage For="@(() => excavatorDTO.HourlyRate)"></ValidationMessage>
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
            <div class="form-group">
                <label for="exampleFormControlTextarea1">
                    Mantenimiento horas <span class="text-danger">*</span>
                </label>
                <InputNumber class="form-control maintenance" id="maintenance" min="0"
                           @bind-Value="excavatorDTO.MaintenanceInterval"
                           placeholder="Número de horas para mantenimiento Ej. 1400">
                </InputNumber>
                <ValidationMessage For="@(() => excavatorDTO.MaintenanceInterval)"></ValidationMessage>
            </div>
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="btn-group mt-3 float-end">
                <button class="@btnType" type="submit">
                    @btnText
                </button>
                <a class="btn btn-danger" href="excavadoras">Cancelar</a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; } = 0;

    string title = string.Empty;
    string btnText = string.Empty;
    string btnType = string.Empty;

    ExcavatorDTO excavatorDTO = new ExcavatorDTO();

    protected override async Task OnInitializedAsync()
    {
        if(id != 0)
        {
            excavatorDTO = await excavatorService.GetByIdExcavator(id);
            btnText = "Actualizar";
            btnType = "btn btn-warning";
            title = "Editar excavadora";
        }
        else
        {
            btnText = "Guardar";
            btnType = "btn btn-success";
            title = "Crear excavadora";
        }
    }

    private async Task OnValidSubmit()
    {
        int idAux = 0;
        if (id == 0) idAux = await excavatorService.StoreExcavator(excavatorDTO);
        else idAux = await excavatorService.UpdateExcavator(excavatorDTO);

        if (idAux != 0)
        {
            navegation.NavigateTo("/excavadoras");
        }
    }

}
