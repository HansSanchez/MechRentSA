@page "/valor-horas"

@inject HttpClient Http
@using MechRentSA.Shared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using MechRentSA.Client.Interfaces;
@inject IJSRuntime JS
@inject SweetAlertService Swal;
@inject IExcavatorWorkLogService excavatorWorkLogService;

<PageTitle>Consultar Valor de Horas de Trabajo</PageTitle>

<h1>Consultar Valor de Horas de Trabajo</h1>

<EditForm Model="consultaHoras" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="PublicWorkId" class="form-label">Obra Pública</label>
        <InputNumber id="PublicWorkId" class="form-control" @bind-Value="consultaHoras.PublicWorkId" />
    </div>
    <div class="mb-3">
        <label for="ExcavatorId" class="form-label">Retroexcavadora</label>
        <InputNumber id="ExcavatorId" class="form-control" @bind-Value="consultaHoras.ExcavatorId" />
    </div>
    <button type="submit" class="btn btn-primary">Consultar</button>
</EditForm>

@if (valorHoras != null)
{
    <div class="mt-3">
        <h2>Valor Total de Horas de Trabajo: @valorHoras.Value.ToString("C", new System.Globalization.CultureInfo("es-CO"))</h2>
    </div>
}

@code {
    private HoursConsultationDTO consultaHoras = new HoursConsultationDTO();
    private decimal? valorHoras = null;

    private async Task HandleValidSubmit()
    {
        try
        {
            valorHoras = await excavatorWorkLogService.GetExcavatorWorkValue(consultaHoras.PublicWorkId, consultaHoras.ExcavatorId);
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }


    public class HoursConsultationDTO
    {
        public int PublicWorkId { get; set; }
        public int ExcavatorId { get; set; }
    }

}
