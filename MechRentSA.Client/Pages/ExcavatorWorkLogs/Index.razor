@page "/registros-de-trabajos"

@inject HttpClient Http
@using MechRentSA.Shared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using MechRentSA.Client.Interfaces;
@inject IJSRuntime JS
@inject SweetAlertService Swal;
@inject IExcavatorWorkLogService excavatorWorkLogService;

<PageTitle>Registros de Trabajo</PageTitle>

<h1>Registros de Trabajo</h1>

<a class="btn btn-success btn-sm mb-3" href="registro-trabajo">Nuevo Registro de Trabajo</a>

<div class="d-flex align-items-center mb-3">
    <InputText class="form-control mr-2" @bind-Value="searchTerm" placeholder="Buscar por nombre de obra o tipo de retroexcavadora" />
    <button class="btn btn-primary" @onclick="SearchWorkLogs">Buscar</button>
</div>

<div class="table-responsive max-h-650">
    <table class="table table-sm table-hover table-bordered table-condensed">
        <thead>
            <tr>
                <th>Id</th>
                <th>Obra Pública</th>
                <th>Retroexcavadora</th>
                <th>Horas Trabajadas</th>
                <th>Fecha de Trabajo</th>
                <th>Opciones</th>
            </tr>
        </thead>
        <tbody>
            @if (listWorkLogs == null || !listWorkLogs.Any())
            {
                <tr>
                    <td colspan="6">Sin datos asociados</td>
                </tr>
            }
            else
            {
                @foreach (var item in listWorkLogs)
                {
                    <tr class="text-center">
                        <td>@item.Id</td>
                        <td>@item.PublicWorkDTO.Name</td>
                        <td>@item.ExcavatorDTO.Type</td>
                        <td>@item.HoursWorked</td>
                        <td>@item.WorkDate.ToString("dd/MM/yyyy")</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => Delete(item.Id))">Eliminar</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="d-flex justify-content-between mt-3">
    <button class="btn btn-primary btn-sm" @onclick="PreviousPage" disabled="@(!HasPreviousPage)">Anterior</button>
    <button class="btn btn-primary btn-sm" @onclick="NextPage" disabled="@(!HasNextPage)">Siguiente</button>
</div>

@code {
    List<ExcavatorWorkLogDTO>? listWorkLogs = null;
    string searchTerm = string.Empty;
    int currentPage = 1;
    int totalPages = 1;
    int pageSize = 2;
    int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkLogs();
    }

    private async Task LoadWorkLogs()
    {
        var response = await excavatorWorkLogService.GetExcavatorWorkLogs(searchTerm, currentPage, pageSize);
        listWorkLogs = response.Items ?? new List<ExcavatorWorkLogDTO>();
        totalItems = response.TotalItems;
        totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
    }

    private async Task SearchWorkLogs()
    {
        currentPage = 1;
        await LoadWorkLogs();
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadWorkLogs();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadWorkLogs();
        }
    }

    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;

    private async Task Delete(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar registro de trabajo",
                Text = "¿Está seguro(a) de realizar esta acción?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (result.IsConfirmed)
        {
            try
            {
                // Aquí debes implementar la lógica para eliminar el registro de trabajo, si está disponible.
                // Ejemplo:
                // var response = await excavatorWorkLogService.DeleteWorkLog(id);
                // if (response.IsSuccessful)
                // {
                //     listWorkLogs = listWorkLogs!.FindAll(e => e.Id != id);
                //     await Swal.FireAsync(new SweetAlertOptions
                //     {
                //         Title = "Éxito",
                //         Text = "El registro de trabajo ha sido eliminado con éxito.",
                //         Icon = SweetAlertIcon.Success,
                //         Timer = 2000 // Se cierra automáticamente después de 2 segundos
                //     });
                //     await JS.InvokeVoidAsync("logToConsole", $"Registro de trabajo con Id {id} eliminado con éxito.");
                // }
                // else
                // {
                //     await Swal.FireAsync(new SweetAlertOptions
                //     {
                //         Title = "Error",
                //         Text = response.Message,
                //         Icon = SweetAlertIcon.Error,
                //         Timer = 3000 // Se cierra automáticamente después de 3 segundos
                //     });
                //     await JS.InvokeVoidAsync("logToConsole", $"Error al eliminar el registro de trabajo con Id {id}: {response.Message}");
                // }
            }
            catch (Exception ex)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = ex.Message,
                        Icon = SweetAlertIcon.Error,
                        Timer = 3000 // Se cierra automáticamente después de 3 segundos
                    });
                await JS.InvokeVoidAsync("logToConsole", $"Error al eliminar el registro de trabajo con Id {id}: {ex.Message}");
            }
        }
    }
}
